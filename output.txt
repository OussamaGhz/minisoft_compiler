Successfully parsed program: Program { name: "L3_software", declarations: [VariableDecl { names: ["x", "y", "z", "i"], type_spec: Type("Int") }, ConstDecl { name: "Software", type_name: "Int", value: Integer(91) }, VariableDecl { names: ["A", "B"], type_spec: ArrayType { type_name: "Int", size: 10 } }], statements: [For { var: "i", start: Literal(Integer(1)), end: Literal(Integer(10)), step: Literal(Integer(2)), body: [Assignment { target: Simple("x"), value: Binary { left: Literal(Integer(5)), op: Add, right: Literal(Integer(-3)) } }, IfElse { condition: Expr(Binary { left: Var(Simple("x")), op: GreaterThan, right: Literal(Integer(0)) }), if_branch: [Output { expressions: [String("Value"), Var(Simple("x"))] }], else_branch: [Input { var: "y" }] }] }, DoWhile { condition: Expr(Binary { left: Var(Simple("z")), op: LessThan, right: Literal(Integer(100)) }), body: [Assignment { target: Simple("z"), value: Binary { left: Var(Simple("z")), op: Add, right: Literal(Integer(1)) } }] }] }
Semantic analysis successful. Symbol table:
y: SymbolEntry { name: "y", entity_type: Variable, data_type: Int, value: Undefined, line: 15, column: 23 }
i: SymbolEntry { name: "i", entity_type: Variable, data_type: Int, value: Undefined, line: 10, column: 13 }
Software: SymbolEntry { name: "Software", entity_type: Constant, data_type: Int, value: Int(91), line: 5, column: 19 }
x: SymbolEntry { name: "x", entity_type: Variable, data_type: Int, value: Undefined, line: 13, column: 33 }
z: SymbolEntry { name: "z", entity_type: Variable, data_type: Int, value: Undefined, line: 21, column: 18 }
A: SymbolEntry { name: "A", entity_type: Array { size: 10 }, data_type: Int, value: Undefined, line: 6, column: 9 }
B: SymbolEntry { name: "B", entity_type: Array { size: 10 }, data_type: Int, value: Undefined, line: 6, column: 12 }
